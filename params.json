{"name":"Top Business Attribute Identification","tagline":"Yelp Dataset Challenge CSE 4334","body":"# <a name=\"top\"></a>Scroll To \r\n[Project Objective](#objective)    \r\n[Classification by Category](#category)    \r\n[Classification by Attribute](#attribute)    \r\n[Attributes in Charlotte](#charlotte)    \r\n[Attributes in Edinburgh](#edinburgh)    \r\n[Attributes in Karlsruhe](#karlsruhe)    \r\n[Attributes in Las Vegas](#lasvegas)    \r\n[Attributes in Madison](#madison)    \r\n[Attributes in Montreal](#montreal)   \r\n[Attributes in Phoenix](#phoenix)   \r\n[Attributes in Pittsburgh](#pittsburgh)   \r\n[Attributes in Waterloo](#waterloo)   \r\n[Combined City Attributes](#combined)   \r\n\r\n# <a name=\"objective\"></a>Project Objective\r\nUsing the Yelp Dataset, I wanted to find out which business attributes people valued when evaluating a business, and see if there was a correlation between business attributes and good (or bad) ratings. I used MATLAB to create single decision trees as well as random forests with the bagged tree method. I used these to evaluate the accuracy of classifying businesses by categories and attributes as well as to find the most important features.\r\n\r\n# <a name=\"category\"></a>Classification By Category\r\nMy first task was to create a classifier which used the categories the business had as a predictor and the rating as a response. I also wanted to include which days of the week the businesses were open, to see if being open on the weekends would be beneficial to a business' rating. The Yelp Dataset was inconsistent in format, so each line was parsed separately resulting in different structures for each line. To get this data into a format that MATLAB would accept for the Classification Learner, I used this code to get the category names, eliminate the categories that were uncommon, and create a table whose columns referred to a category and whose rows were binary data telling whether or not it belonged to that category.\r\n```\r\n%Find a list of all unique attributes\r\nfunction [category_names] = getCategoryNames(business_data)\r\n    counter=1;\r\n    category_names={};\r\n    %add days of week open as an attribute\r\n    category_names{end+1} = 'Monday';\r\n    category_names{end+1} = 'Tuesday';\r\n    category_names{end+1} = 'Wednesday';\r\n    category_names{end+1} = 'Thursday';\r\n    category_names{end+1} = 'Friday';\r\n    category_names{end+1} = 'Saturday';\r\n    category_names{end+1} = 'Sunday';\r\n    unique_category_names = {};\r\n    all_category_names = {};\r\n    while counter <= length(business_data)\r\n        if gt(length(business_data(counter).categories), 0)\r\n            for fname = business_data(counter).categories(1,:)\r\n                for k=1:length(fname)\r\n                    %only get first word of category to combine types\r\n                    name = strsplit(fname{k});\r\n                    newname = name{1};\r\n                    if isempty(find(strcmp(unique_category_names, newname)))\r\n                        unique_category_names{end+1} = newname;\r\n                    end\r\n                    all_category_names{end+1} = newname;\r\n                end\r\n            end\r\n        end\r\n        counter = counter+1;\r\n    end\r\n\r\n    counter = 1;\r\n    for aname = unique_category_names(1,:)\r\n        %disregard uncommon types of business\r\n        if length(find(strcmp(all_category_names, aname))) >= 20\r\n            category_names{end+1} = aname{1};\r\n        end\r\n        counter = counter + 1;\r\n    end\r\n    category_names{end+1} = 'HighRating';\r\n\r\n%Turn business data into format we can create decision trees, cells with columns for attribute names \r\nfunction [category_table] =  setupCategoryBusinessData(business_data, category_names)\r\n    category_cells = zeros(length(business_data), length(category_names));\r\n\r\n    counter =1;\r\n    while(counter <= length(business_data))\r\n        if gt(length(business_data(counter).categories), 0)\r\n            for fname = business_data(counter).categories(1,:)\r\n                for k=1:length(fname)\r\n                    name = strsplit(fname{k});\r\n                    newname = name{1};\r\n                    index = find(strcmp(category_names, newname));\r\n                    if not(isempty(index))\r\n                        category_cells(counter,index) = 1;\r\n                    end\r\n                end\r\n            end\r\n        end\r\n        if gt(length(fieldnames(business_data(counter).hours)), 0)\r\n            for fname = fieldnames(business_data(counter).hours(1,:))\r\n                for k=1:length(fname)\r\n                    category_cells(counter,find(strcmp(category_names, fname{k}))) = 1;\r\n                end\r\n            end\r\n        end \r\n        rating = business_data(counter).stars;\r\n        if (rating > 3.0)\r\n            category_cells(counter, end) = 1;\r\n        end\r\n        counter = counter + 1;\r\n    end\r\n    %remove unneeded characters from variable names\r\n    fixed_category_names = {};\r\n    fixed_category_names = strrep(strrep(category_names, '&', '_'), ' ', '_');\r\n    fixed_category_names = strrep(strrep(fixed_category_names, '(', '_'), ')', '_');\r\n    fixed_category_names = strrep(strrep(fixed_category_names, '-', '_'), ',', '_');\r\n    fixed_category_names = strrep(strrep(fixed_category_names, char(39), '_'), '/', '');\r\n    %convert array to table with column names\r\n\r\n\r\n    category_table = array2table(category_cells, 'VariableNames', fixed_category_names);\r\n    clear('category_cells');\r\n    clear('fixed_category_names');\r\n```\r\n\r\nHowever after this setup, we are left with a table with over 400 predictors. Using the Classification Learner, we create a decision tree using 5 fold cross validation and generate a confusion matrix to see the accuracy of our classifier.\r\n\r\n![](https://raw.githubusercontent.com/andrewtoscano/6339Project/master/figures/categoryClassifierConfusionMatrix.jpg)\r\n\r\nAs you can see, this is not a very accurate classifier. The high amount of false positives imply that there is a bias towards high ratings because there are more high rated businesses than low rated businesses. However I still created a Bagged Tree Classifier to evaluate the important features.\r\n\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/categoryOOBImportance.jpg)\r\n\r\nBy permutating each variable over many trees, the out of bag feature importance is evaluated by the change in classification rate. This implies that these are the most important categories that should determine whether a business is highly rated or not. \r\n\r\n# <a name=\"attribute\"></a>Classification by Attribute\r\nTo evaluate the classification by attributes, a very similar method of setting up the data was used. Because the predictors were much less numerous, it was possible to use a larger bag of trees for evaluation, which would provide better accuracy. This is the resulting classification confusion matrix.\r\n\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/attributeClassifierConfusionMatrix.jpg)\r\n\r\nAlthough there is an increase in accuracy, it is still fairly inaccurate. Here is the resulting out of bag feature importance.\r\n\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/attributeOOBImportance.jpg)\r\n\r\nBy separating the data by each major city and creating a new classifier for each, we can see that the accuracy will be quite accurate for certain cities and that the important features will differ.\r\n\r\n# <a name=\"charlotte\"></a>Attributes in Charlotte\r\n### Classification Confusion Matrix\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/CharlotteAttributeConfusionMatrix.jpg)\r\n### Feature Importance\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/CharlotteOOBImportanceGraph.jpg)\r\n\r\n# <a name=\"edinburgh\"></a>Attributes in Edinburgh\r\n### Classification Confusion Matrix\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/EdinburghAttributeConfusionMatrix.jpg)\r\n### Feature Importance\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/EdinburghOOBImportanceGraph.jpg)\r\n\r\n# <a name=\"karlsruhe\"></a>Attributes in Karlsruhe\r\n### Classification Confusion Matrix\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/KarlsruheAttributeConfusionMatrix.jpg)\r\n### Feature Importance\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/KarlsruheOOBImportanceGraph.jpg)\r\n\r\n# <a name=\"lasvegas\"></a>Attributes in Las Vegas\r\n### Classification Confusion Matrix\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/Las VegasAttributeConfusionMatrix.jpg)\r\n### Feature Importance\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/Las VegasOOBImportanceGraph.jpg)\r\n\r\n# <a name=\"madison\"></a>Attributes in Madison\r\n### Classification Confusion Matrix\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/MadisonAttributeConfusionMatrix.jpg)\r\n### Feature Importance\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/MadisonOOBImportanceGraph.jpg)\r\n\r\n# <a name=\"montreal\"></a>Attributes in Montreal\r\n### Classification Confusion Matrix\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/MontrealAttributeConfusionMatrix.jpg)\r\n### Feature Importance\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/MontrealOOBImportanceGraph.jpg)\r\n\r\n# <a name=\"phoenix\"></a>Attributes in Phoenix\r\n### Classification Confusion Matrix\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/PhoenixAttributeConfusionMatrix.jpg)\r\n### Feature Importance\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/PhoenixOOBImportanceGraph.jpg)\r\n\r\n# <a name=\"pittsburgh\"></a>Attributes in Pittsburgh\r\n### Classification Confusion Matrix\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/PittsburghAttributeConfusionMatrix.jpg)\r\n### Feature Importance\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/PittsburghOOBImportanceGraph.jpg)\r\n\r\n# <a name=\"waterloo\"></a>Attributes in Waterloo\r\n### Classification Confusion Matrix\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/WaterlooAttributeConfusionMatrix.jpg)\r\n### Feature Importance\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/WaterlooOOBImportanceGraph.jpg)\r\n\r\n# <a name=\"combined\"></a>Combined City Attributes\r\nBy adding up how many times each attribute occurs in one of the 9 major cities, we can more properly identify what attributes are most valued as a whole.\r\n\r\n![](https://github.com/andrewtoscano/6339Project/blob/master/figures/cityFeatureCount.jpg)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}